Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example:

    Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
    Output: 6
    Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Aproach:
      In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.
      

  Algorithm

・Find maximum height of bar from the left end upto an index i in the array \text{left\_max}left_max.
・Find maximum height of bar from the right end upto an index i in the array \text{right\_max}right_max.
・Iterate over the \text{height}height array and update ans:
・Add \min(\text{left\_max}[i],\text{right\_max}[i]) - \text{height}[i]min(left_max[i],right_max[i])−height[i] to \text{ans}ans


Solution:
                class Solution {
          public:
              int trap(vector<int>& height) {
                  if(height.empty())
                  return 0;
              int ans = 0;
              int size = height.size();
              vector<int> left_max(size), right_max(size);
              left_max[0] = height[0];
              for (int i = 1; i < size; i++) {
                  left_max[i] = max(height[i], left_max[i - 1]);
              }
              right_max[size - 1] = height[size - 1];
              for (int i = size - 2; i >= 0; i--) {
                  right_max[i] = max(height[i], right_max[i + 1]);
              }
              for (int i = 1; i < size - 1; i++) {
                  ans += min(left_max[i], right_max[i]) - height[i];
              }
              return ans;

              }
          };
          
          
          
          
